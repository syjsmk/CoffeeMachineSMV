#define CoinValue {0, 1, 5, 10}
#define Button_Value {1, 5, 7, 10}
#define Button_0_Value 1
#define Button_1_Value 5
#define Button_2_Value 7
#define Button_3_Value 10


/*

0607
TODO : 잔금 반환.

잔돈을 내줄 수 있는 경우에 대한 커피 버튼만
동작해야 함.
200원을 넣었을 때 50원을 거슬러줄 수 없으면 150원짜리에 불이 들어오게
하면 안됨.


quantifier를 CTL에 맞게 쓰라는 소리임.
-> Temporal Combinator(X, F, U, G)는 Path Quantifier뒤에 붙어서 나와야 함.
-> EX, AX, EU, ...

Temporal Combinator
X : next state // 현재의 다음
F : a future state // 미래의 언젠가
G : all the future state // 현재 포함해서 계속
U : A U B // 해당 state부터 A가 계속 만족되다가 A가 종료되면서 B가 만족되어야 함.

Path quantifier
A : all the executions out of the current state satisfy property 0 // 현재부터 시작되는 모든 path
E : from the current state, there exist an execution satisfying 0 // 현재부터 시작되는 path중 적어도 하나
*/

/*

기존 코드의 문제점은
#define CoinValue {1, 5, 10} 
로 Coin이 들어오지 않는 경우가 없었음.
따라서 항상 Coin_Ack가 1이 됐으며 이로 인해
다른 입력에 대한 처리가 제대로 되지 않은 것임.

SPEC EF (Coin = 0);
이게 안됐음.

현재 수정한 우선순위는
Coin > Button_N > Refund > NoInput



동전 잔고 체크
컵, 커피 잔고 체크
있음/없음 표시.
시간 조건 추가(refund 누르고 돈이 나올 때까지의 시간)
idle // 버튼에 불이 들어왔을 때 몇 초동안 누르지 않으면 돈 반환.

Coin_Remain
Cup_Remain
Coffee_0_Remain
Coffee_1_Remain
Coffee_2_Remain
Coffee_3_Remain

Cup_Available
Coffee_0_Available
Coffee_1_Available
Coffee_2_Available
Coffee_3_Available

*/

/* module main(Coin, Button_0, Button_1, Button_2, Button_3, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Refund, Display, Ramp, Cup, SYJ_TIME, Change, Coin_Remain, Cup_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain){ */
module main(Coin, Button_0, Button_1, Button_2, Button_3, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Refund,
			/* Display, Ramp, Cup, SYJ_TIME, Change, Coin_Remain, Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain, */
			Display, Ramp, Cup, SYJ_TIME, Change,
			Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available, Led){
	
	input Coin : CoinValue;
	input Button_0, Button_1, Button_2, Button_3, Refund : boolean;

	Coin_Ack, Button_0_Ack, Button_1_Ack, Button_2_Ack, Button_3_Ack, Refund_Ack, NoInput_Ack : boolean;

	output Ramp, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Cup : boolean;

	output Display, Change: 0..100;
	output SYJ_TIME : 0..1000;
	/* output Coin_Remain : 0..100; */
	Coin_Remain : 0..100;

	/* added */
	Cup_Remain : 0..10;
	/* output Cup_Remain : 0..10; */
	Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain : 0..5;
	/* output Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain : 0..5; */
	IdleTimeCount : 0..2;

	output Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available : boolean;

	/* v3 */
	output Led : 0..4;

	init(Coin_Remain) := 50;
	init(Cup_Remain) := 60;
	init(Coffee_0_Remain) := 50;
	init(Coffee_1_Remain) := 50;
	init(Coffee_2_Remain) := 50;
	init(Coffee_3_Remain) := 50;
	init(IdleTimeCount) := 0;

/*
	init(Coffee_0_Available) := 1;
	init(Coffee_1_Available) := 1;
	init(Coffee_2_Available) := 1;
	init(Coffee_3_Available) := 1;
*/

	/* TODO: available의 초기화 시점. next를 쓰는 것이 맞는가 */
	if(Cup_Remain = 0) {
		/*init(Cup_Available) := 1;*/
		Cup_Available := 0;
	} else {
		/*init(Cup_Available) := 0;*/
		Cup_Available := 1;
	}
	if(Coffee_0_Remain = 0) {
		/*init(Coffee_0_Available) := 1;*/
		Coffee_0_Available := 0;
	} else {
		/*init(Coffee_0_Available) := 0;*/
		Coffee_0_Available := 1;
	}
	if(Coffee_1_Remain = 0) {
		/*init(Coffee_1_Available) := 1;*/
		Coffee_1_Available := 0;
	} else {
		/*init(Coffee_1_Available) := 0;*/
		Coffee_1_Available := 1;
	}
	if(Coffee_2_Remain = 0) {
		/*init(Coffee_2_Available) := 1;*/
		Coffee_2_Available := 0;
	} else {
		/*init(Coffee_2_Available) := 0;*/
		Coffee_2_Available := 1;
	}
	if(Coffee_3_Remain = 0) {
		/*init(Coffee_3_Available) := 1;*/
		Coffee_3_Available := 0;
	} else {
		/*init(Coffee_3_Available) := 0;*/
		Coffee_3_Available := 1;
	}


	

	
	init(Change) := 0;

	init(Ramp) := 0;
	init(Cup) := 0;
	/* Cup := 0; */
	/*
	init(Button_0_Ramp) := 0;
	init(Button_1_Ramp) := 0;
	init(Button_2_Ramp) := 0;
	init(Button_3_Ramp) := 0;
	*/

	state : {Init, Sum_Max, Turn_On_Ramp, Input_Button_0, Input_Button_1, Input_Button_2, Input_Button_3, No_Coffee_0, No_Coffee_1, No_Coffee_2, No_Coffee_3, No_Cup, Cup_And_Ramp};
	init(state) := Init;

	init(SYJ_TIME) := 0;
	next(SYJ_TIME) := SYJ_TIME + 10;

	if(Coin = 1 | Coin = 5 | Coin = 10) {
		Coin_Ack := 1;
		Button_0_Ack := 0;
		Button_1_Ack := 0;
		Button_2_Ack := 0;
		Button_3_Ack := 0;
		Refund_Ack := 0;
		NoInput_Ack := 0;

	} else {

		if(Button_0 = 1) {
			Coin_Ack := 0;
			Button_0_Ack := 1;
			Button_1_Ack := 0;
			Button_2_Ack := 0;
			Button_3_Ack := 0;
			Refund_Ack := 0;
			NoInput_Ack := 0;
		} else {
			if(Button_1 = 1) {
				Coin_Ack := 0;
				Button_0_Ack := 0;
				Button_1_Ack := 1;
				Button_2_Ack := 0;
				Button_3_Ack := 0;
				Refund_Ack := 0;
				NoInput_Ack := 0;
			} else {
				if(Button_2 = 1) {
					/*inputType := 3;*/

					Coin_Ack := 0;
					Button_0_Ack := 0;
					Button_1_Ack := 0;
					Button_2_Ack := 1;
					Button_3_Ack := 0;
					Refund_Ack := 0;
					NoInput_Ack := 0;
				} else {
					if(Button_3 = 1) {
						/*inputType := 4;*/

						Coin_Ack := 0;
						Button_0_Ack := 0;
						Button_1_Ack := 0;
						Button_2_Ack := 0;
						Button_3_Ack := 1;
						Refund_Ack := 0;
						NoInput_Ack := 0;
					} else {
						if(Refund = 1) {
							/*inputType := 5;*/
							Coin_Ack := 0;
							Button_0_Ack := 0;
							Button_1_Ack := 0;
							Button_2_Ack := 0;
							Button_3_Ack := 0;
							Refund_Ack := 1;
							NoInput_Ack := 0;
						} else {
							if(Coin = 0) {
								Coin_Ack := 0;
								Button_0_Ack := 0;
								Button_1_Ack := 0;
								Button_2_Ack := 0;
								Button_3_Ack := 0;
								Refund_Ack := 0;
								NoInput_Ack := 1;
							}
						}
					}
				}		
			}
		}
	}

	

	Sum : 0..100;
	init(Sum) := Coin;

	Display := Sum;
/*
	b1, b2  : boolean;
	init(b1) := 0;
	init(b2) := 0;
*/

/*
	if(Sum >= Button_0_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 0;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	} else if(Sum >= Button_1_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	} else if(Sum >= Button_2_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 1;
		Button_3_Ramp := 0;
	} else if(Sum > Button_3_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 1;
		Button_3_Ramp := 1;
	} else {
		Button_0_Ramp := 0;
		Button_1_Ramp := 0;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	}
*/

	if(Sum >= Button_3_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 1;
		Button_3_Ramp := 1;
	} else if(Sum >= Button_2_Value & Sum < Button_3_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 1;
		Button_3_Ramp := 0;
	} else if(Sum >= Button_1_Value & Sum < Button_2_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	} else if(Sum >= Button_0_Value & Sum < Button_1_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 0;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	} else if(Sum < Button_0_Value) {
		Button_0_Ramp := 0;
		Button_1_Ramp := 0;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	}

/********************************************* init state *********************************************/
	if(state = Init) {
		next(Led) := 4;

		if(NoInput_Ack = 1) {
			next(state) := Init;
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
			}

		} else if(Refund_Ack = 1 | Button_0_Ack = 1 | Button_1_Ack = 1 | Button_2_Ack = 1 | Button_3_Ack = 1) { 
			next(state) := Init;
		} else if(Coin_Ack = 1) {
			next(state) := Turn_On_Ramp;
			next(Sum) := Sum + Coin;
		}
/********************************************* Turn_On_Ramp state *********************************************/
	} else if(state = Turn_On_Ramp) {
		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				/*
				next(state) := Turn_On_Ramp;
				*/
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(Coffee_0_Remain > 0) {
					next(state) := Input_Button_0;
				} else {
					next(state) := No_Coffee_0;
				}
			}

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(Coffee_1_Remain > 0) {
					next(state) := Input_Button_1;
				} else {
					next(state) := No_Coffee_1;
				}
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(Coffee_2_Remain > 0) {
					next(state) := Input_Button_2;
				} else {
					next(state) := No_Coffee_2;
				}
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(Coffee_3_Remain > 0) {
					next(state) := Input_Button_3;
				} else {
					next(state) := No_Coffee_3;
				}
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Sum + Coin >= 100) {
				next(state) := Sum_Max;
				next(Sum) := Sum;
				next(Change) := Coin;
				
			} else {
				next(Sum) := Sum + Coin;
				next(state) := Turn_On_Ramp;
				
			}
		}

/********************************************* Sum_Max state *********************************************/
	} else if(state = Sum_Max) {
		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_0_Remain = 0) {
				next(state) := No_Coffee_0;
			} else {
				next(state) := Input_Button_0;
			}

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_1_Remain = 0) {
				next(state) := No_Coffee_1;
			} else {
				next(state) := Input_Button_1;
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_2_Remain = 0) {
				next(state) := No_Coffee_2;
			} else {
				next(state) := Input_Button_2;
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_3_Remain = 0) {
				next(state) := No_Coffee_3;
			} else {
				next(state) := Input_Button_3;
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := state;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

/********************************************* Input_Button_0 state *********************************************/
	} else if(state = Input_Button_0) {

		next(IdleTimeCount) := 0;
		if(Sum >= Button_0_Value) {

			next(Sum) := Sum - Button_0_Value;
			next(Cup) := 1;
			next(Ramp) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_0_Remain) := Coffee_0_Remain - 1;
			next(state) := Cup_And_Ramp;
			next(Led) := 0;
		} else {
			next(state) := state;
		}
/********************************************* Input_Button_1 state *********************************************/
	} else if(state = Input_Button_1) {
		next(IdleTimeCount) := 0;
		if(Sum >= Button_1_Value) {

			next(Sum) := Sum - Button_1_Value;
			next(Cup) := 1;
			next(Ramp) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_1_Remain) := Coffee_1_Remain - 1;
			next(state) := Cup_And_Ramp;
			next(Led) := 1;
		} else {
			next(state) := state;
		}

/********************************************* Input_Button_2 state *********************************************/
	} else if(state = Input_Button_2) {
		next(IdleTimeCount) := 0;
		if(Sum >= Button_2_Value) {

			next(Sum) := Sum - Button_2_Value;
			next(Cup) := 1;
			next(Ramp) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_2_Remain) := Coffee_2_Remain - 1;
			next(state) := Cup_And_Ramp;
			next(Led) := 2;
		} else {
			next(state) := state;
		}

/********************************************* Input_Button_3 state *********************************************/
	} else if(state = Input_Button_3) {
		next(IdleTimeCount) := 0;
		if(Sum >= Button_3_Value) {

			next(Sum) := Sum - Button_3_Value;
			next(Cup) := 1;
			next(Ramp) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_3_Remain) := Coffee_3_Remain - 1;
			next(state) := Cup_And_Ramp;
			next(Led) := 3;
		} else {
			next(state) := state;
		}

/********************************************* No_Coffee_0 state *********************************************/
	} else if(state = No_Coffee_0) {

		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;
			next(state) := No_Coffee_0;

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_1_Remain = 0) {
				next(state) := No_Coffee_1;
			} else {
				next(state) := Input_Button_1;
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_2_Remain = 0) {
				next(state) := No_Coffee_2;
			} else {
				next(state) := Input_Button_2;
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_3_Remain = 0) {
				next(state) := No_Coffee_3;
			} else {
				next(state) := Input_Button_3;
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := Turn_On_Ramp;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

/********************************************* No_Coffee_1 state *********************************************/
	} else if(state = No_Coffee_1) {

		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_0_Remain = 0) {
				next(state) := No_Coffee_0;
			} else {
				next(state) := Input_Button_0;
			}

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_1_Remain = 0) {
				next(state) := No_Coffee_1;
			} else {
				next(state) := Input_Button_1;
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_2_Remain = 0) {
				next(state) := No_Coffee_2;
			} else {
				next(state) := Input_Button_2;
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_3_Remain = 0) {
				next(state) := No_Coffee_3;
			} else {
				next(state) := Input_Button_3;
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := Turn_On_Ramp;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

/********************************************* No_Coffee_2 state *********************************************/
	} else if(state = No_Coffee_2) {

		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_0_Remain = 0) {
				next(state) := No_Coffee_0;
			} else {
				next(state) := Input_Button_0;
			}

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_1_Remain = 0) {
				next(state) := No_Coffee_1;
			} else {
				next(state) := Input_Button_1;
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_2_Remain = 0) {
				next(state) := No_Coffee_2;
			} else {
				next(state) := Input_Button_2;
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_3_Remain = 0) {
				next(state) := No_Coffee_3;
			} else {
				next(state) := Input_Button_3;
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := Turn_On_Ramp;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

/********************************************* No_Coffee_3 state *********************************************/
	} else if(state = No_Coffee_3) {

		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_0_Remain = 0) {
				next(state) := No_Coffee_0;
			} else {
				next(state) := Input_Button_0;
			}

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_1_Remain = 0) {
				next(state) := No_Coffee_1;
			} else {
				next(state) := Input_Button_1;
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_2_Remain = 0) {
				next(state) := No_Coffee_2;
			} else {
				next(state) := Input_Button_2;
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_3_Remain = 0) {
				next(state) := No_Coffee_3;
			} else {
				next(state) := Input_Button_3;
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := Turn_On_Ramp;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

/********************************************* No_Cup state *********************************************/
	} else if(state = No_Cup) {

		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(Sum) := 0;
				next(Change) := Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := state;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_0_Remain = 0) {
				next(state) := No_Coffee_0;
			} else {
				next(state) := Input_Button_0;
			}

		} else if(Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_1_Remain = 0) {
				next(state) := No_Coffee_1;
			} else {
				next(state) := Input_Button_1;
			}

		} else if(Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_2_Remain = 0) {
				next(state) := No_Coffee_2;
			} else {
				next(state) := Input_Button_2;
			}

		} else if(Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(Cup_Remain = 0) {
				next(state) := No_Cup;
			} else if(Coffee_3_Remain = 0) {
				next(state) := No_Coffee_3;
			} else {
				next(state) := Input_Button_3;
			}

		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := Turn_On_Ramp;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

/********************************************* Cup_And_Ramp state *********************************************/
	} else if(state = Cup_And_Ramp) {

		next(Cup) := 0;
		next(Ramp) := 0;

		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				next(state) := Turn_On_Ramp;
			}

		} else if(Refund_Ack = 1) {
			next(Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(Button_0_Ack = 1 | Button_1_Ack = 1 | Button_2_Ack = 1 | Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;
			next(state) := Turn_On_Ramp;

			
		} else if(Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			next(state) := Turn_On_Ramp;
			next(Sum) := Sum;
			next(Change) := Coin;
				
		}

	}
	

	/*
	if(Coin_Ack = 1) 
	{
		next(IdleTimeCount) := 0;

		if(Sum + Coin <= 100) {
			next(Sum) := Sum + Coin;
			next(Change) := 0;
			next(Cup) := 0;
		} else {
			next(Sum) := Sum;
			next(Change) := Coin;
			next(Cup) := 0;
		}
		
	} else if(Button_0_Ack = 1) {
		next(IdleTimeCount) := 0;

		if(Sum - Button_0_Value >= 0 & Coffee_0_Remain > 0 & Cup_Remain > 0) {
			next(Sum) := Sum - Button_0_Value;
			next(Change) := 0;
			next(Cup) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_0_Remain) := Coffee_0_Remain - 1;
			next(Led) := 0;
		} else if(Cup_Remain = 0) {
			next(Cup) := 0;
		}
		

	} else if(Button_1_Ack = 1) {
		next(IdleTimeCount) := 0;
		if(Sum - Button_1_Value >= 0 & Coffee_1_Remain > 0 & Cup_Remain > 0) {
			next(Sum) := Sum - Button_1_Value;
			next(Change) := 0;
			next(Cup) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_1_Remain) := Coffee_1_Remain - 1;
			next(Led) := 1;
		} else if(Cup_Remain = 0) {
			next(Cup) := 0;
		}
	} else if(Button_2_Ack = 1) {
		next(IdleTimeCount) := 0;
		if(Sum - Button_2_Value >= 0 & Coffee_2_Remain > 0 & Cup_Remain > 0) {
			next(Sum) := Sum - Button_2_Value;
			next(Change) := 0;
			next(Cup) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_2_Remain) := Coffee_2_Remain - 1;
			next(Led) := 2;
		} else if(Cup_Remain = 0) {
			next(Cup) := 0;
		}
	} else if(Button_3_Ack = 1) {
		next(IdleTimeCount) := 0;
		if(Sum - Button_3_Value >= 0 & Coffee_3_Remain > 0 & Cup_Remain > 0) {
			next(Sum) := Sum - Button_3_Value;
			next(Change) := 0;
			next(Cup) := 1;
			next(Cup_Remain) := Cup_Remain - 1;
			next(Coffee_3_Remain) := Coffee_3_Remain - 1;
			next(Led) := 3;
		} else if(Cup_Remain = 0) {
			next(Cup) := 0;
		}
	} else if(Refund_Ack = 1) {
		next(Sum) := 0;
		next(Change) := Sum;
		next(Cup) := 0;
		next(IdleTimeCount) := 0;

	} else if(NoInput_Ack = 1) {
		next(Cup) := 0;

		if(IdleTimeCount < 2) {
			next(IdleTimeCount) := IdleTimeCount + 1;
		} else {
			next(Led) := 4;
			next(IdleTimeCount) := 0;
			next(Change) := Sum;
			next(Sum) := 0;
		}
		


	}
	*/
	

/*
	if(Coin_Ack = 1) 
	{
		next(b1) := 1;
		next(b2) := 0;
	} else {
		if(Button_1_Ack = 1) {
		next(b1) := 0;
		next(b2) := 1;
		}

	}
*/

	/* -> 연산자 */
	/*
	p, q : boolean;
	p := 1;
	q := 0;
	*/
	/* 00, 01, 10, 11 중에서 10만 0이 나옴. */

	/*//////////////////////////////*/

	/* pq : SPEC AG (p -> q); */

	/* XOR
	a, b : boolean;
	a := 0;
	b := 1;
	temp : SPEC EF ((~a & b) | (a & ~b));
	*/

	/* 
		Ack가 한 번에 하나 이상이 들어오지 않으며(booleant), 항상 하나 이상의 Ack는 들어온다(alwaysInputAck)
		~을 없앰, ~을 붙임 을 해서 결과를 바꿨을 경우 SMV에 잡힘.
	 */

	/*       //////////// -> 사용 /////////////////

	-> 가 있는 경우에 대해서 false를 만들고 싶으면
	A -> B에서 A -> ~B가 아니라
	~(A -> B) 여야 함.

	SumTest : SPEC AG ((Coin_Ack = 1 & Refund_Ack = 0) -> AX (Sum > 0)); 에서
	SumTest : SPEC AG ((Coin_Ack = 1 & Refund_Ack = 0) -> AX ~(Sum > 0)); 가 아니라
	SumTest : SPEC AG ~((Coin_Ack = 1 & Refund_Ack = 0) -> AX (Sum > 0)); 인듯 함

	*/

	/* 검증구문 자체에 대한 확증이 없음.
	booleant : SPEC AX EF ~(b1 = b2);
	*/
/*
	stateCheck_1 : SPEC EF (state = Init);
	stateCheck_2 : SPEC EF (state = Turn_On_Ramp);
	stateCheck_3 : SPEC EF (state = Sum_Max);
	stateCheck_4 : SPEC EF (state = Input_Button_0);
	stateCheck_5 : SPEC EF (state = Input_Button_1);
	stateCheck_6 : SPEC EF (state = Input_Button_2);
	stateCheck_7 : SPEC EF (state = Input_Button_3);
	stateCheck_8 : SPEC EF (state = No_Coffee_0);
	stateCheck_9 : SPEC EF (state = No_Coffee_1);
	stateCheck_10 : SPEC EF (state = No_Coffee_2);
	stateCheck_11 : SPEC EF (state = No_Coffee_3);
	stateCheck_12 : SPEC EF (state = No_Cup);
	stateCheck_13 : SPEC EF (state = Cup_And_Ramp);
*/

	stateRelateCheck_1 : SPEC AG ((state = Init) -> AX (state = Turn_On_Ramp | state = Init));

	stateRelateCheck_2 : SPEC AG ((state = Turn_On_Ramp) -> AX (state = Sum_Max | state = Init | state = Turn_On_Ramp | 
		state = Input_Button_0 | state = Input_Button_1 | state = Input_Button_2 | state = Input_Button_3 | 
		state = No_Coffee_0 | state = No_Coffee_1 | state = No_Coffee_2 | state = No_Coffee_3 | state = No_Cup));

	stateRelateCheck_3 : SPEC AG ((state = Sum_Max) -> AX (state = Sum_Max | state = Init | state = Turn_On_Ramp | 
		state = Input_Button_0 | state = Input_Button_1 | state = Input_Button_2 | state = Input_Button_3 | 
		state = No_Coffee_0 | state = No_Coffee_1 | state = No_Coffee_2 | state = No_Coffee_3 | state = No_Cup));

	stateRelateCheck_4 : SPEC AG ((state = Input_Button_0) -> AX (state = Input_Button_0 | state = Input_Button_1 | state = Input_Button_2
	 | state = Input_Button_3 | state = Cup_And_Ramp));

	stateRelateCheck_5 : SPEC AG ((state = Input_Button_1) -> AX (state = Input_Button_0 | state = Input_Button_1 | state = Input_Button_2
	 | state = Input_Button_3 | state = Cup_And_Ramp));

	stateRelateCheck_6 : SPEC AG ((state = Input_Button_2) -> AX (state = Input_Button_0 | state = Input_Button_1 | state = Input_Button_2
	 | state = Input_Button_3 | state = Cup_And_Ramp));

	stateRelateCheck_7 : SPEC AG ((state = Input_Button_3) -> AX (state = Input_Button_0 | state = Input_Button_1 | state = Input_Button_2
	 | state = Input_Button_3 | state = Cup_And_Ramp));

	stateRelateCheck_8 : SPEC AG ((state = No_Coffee_0) -> AX (state = Input_Button_1 | state = Input_Button_2
	 | state = Input_Button_3 | state = Cup_And_Ramp | state = No_Coffee_0 | state = No_Coffee_1 | state = No_Coffee_2
	  | state = No_Coffee_3 | state = Init | state = Turn_On_Ramp));
	
	stateRelateCheck_9 : SPEC AG ((state = No_Coffee_0) -> AG ~(state = Input_Button_0));
	/*
	stateRelateCheck_9_1 : SPEC AG ((state = No_Coffee_0) -> EF (state = Input_Button_0));
	*/
	stateRelateCheck_9_2 : SPEC AG ((state = No_Coffee_0) -> EF (state = Input_Button_1));

	stateRelateCheck_10 : SPEC AG ((state = No_Cup) -> AX (state = No_Cup | state = Turn_On_Ramp | state = Init));

	stateRelateCheck_11 : SPEC AG ((state = Cup_And_Ramp) -> AX (state = Turn_On_Ramp | state = Init));
	stateRelateCheck_11_1 : SPEC AG ((Coffee_1_Remain > 0 & Cup_Remain > 0 
		& state = Cup_And_Ramp) -> EF (state = Input_Button_1));
	/*
	stateRelateCheck_11_2 : SPEC AG ((state = Cup_And_Ramp) -> EF (state = Input_Button_1));
	*/
	
	timeCheck : SPEC AG EF (SYJ_TIME = 1000);
	timeCheck_1 : SPEC AG ~(SYJ_TIME = 1000);
	

}
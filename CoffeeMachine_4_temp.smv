#define CoinValue {0, 1, 5, 10}
#define Button_Value {1, 5, 7, 10}
#define Button_0_Value 1
#define Button_1_Value 5
#define Button_2_Value 7
#define Button_3_Value 10


/*

0607
TODO : 잔금 반환.

잔돈을 내줄 수 있는 경우에 대한 커피 버튼만
동작해야 함.
200원을 넣었을 때 50원을 거슬러줄 수 없으면 150원짜리에 불이 들어오게
하면 안됨.


quantifier를 CTL에 맞게 쓰라는 소리임.
-> Temporal Combinator(X, F, U, G)는 Path Quantifier뒤에 붙어서 나와야 함.
-> EX, AX, EU, ...

Temporal Combinator
X : next state // 현재의 다음
F : a future state // 미래의 언젠가
G : all the future state // 현재 포함해서 계속
U : A U B // 해당 state부터 A가 계속 만족되다가 A가 종료되면서 B가 만족되어야 함.

Path quantifier
A : all the executions out of the current state satisfy property 0 // 현재부터 시작되는 모든 path
E : from the current state, there exist an execution satisfying 0 // 현재부터 시작되는 path중 적어도 하나
*/

/*

기존 코드의 문제점은
#define CoinValue {1, 5, 10} 
로 Coin이 들어오지 않는 경우가 없었음.
따라서 항상 Coin_Ack가 1이 됐으며 이로 인해
다른 입력에 대한 처리가 제대로 되지 않은 것임.

SPEC EF (Coin = 0);
이게 안됐음.

현재 수정한 우선순위는
Coin > Button_N > Refund > NoInput



동전 잔고 체크
컵, 커피 잔고 체크
있음/없음 표시.
시간 조건 추가(refund 누르고 돈이 나올 때까지의 시간)
idle // 버튼에 불이 들어왔을 때 몇 초동안 누르지 않으면 돈 반환.

Coin_Remain
Cup_Remain
Coffee_0_Remain
Coffee_1_Remain
Coffee_2_Remain
Coffee_3_Remain

Cup_Available
Coffee_0_Available
Coffee_1_Available
Coffee_2_Available
Coffee_3_Available

*/

/*
MODULE MainControlSWModule(SYJ_TIME) {
*/
MODULE MainControlSWModule(SYJ_TIME, buttonControlSWModule, displayModule, moneyCalculateModule, coffeeMakingModule) {

	input SYJ_TIME : 0..1000;

	state : {Init, Sum_Max, Turn_On_Ramp, Input_Button_0, Input_Button_1, Input_Button_2, Input_Button_3, No_Coffee_0, No_Coffee_1, No_Coffee_2, No_Coffee_3, No_Cup, Cup_And_Ramp};
	init(state) := Init;

	NoInput_Ack : boolean;

	if(moneyCalculateModule.Coin_Ack = 0 & buttonControlSWModule.Button_0_Ack = 0 & buttonControlSWModule.Button_1_Ack = 0 & buttonControlSWModule.Button_2_Ack = 0 & buttonControlSWModule.Button_3_Ack = 0 & buttonControlSWModule.Refund_Ack = 0)
	{
		NoInput_Ack := 1;
	} else {
		NoInput_Ack := 0;
	}

	IdleTimeCount : 0..2;

	displayModule.Sum := moneyCalculateModule.Sum;

	if(state = Init) {
		next(displayModule.Led) := 4;

		if(NoInput_Ack = 1) {
			next(state) := Init;
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(moneyCalculateModule.Sum) := 0;
				next(moneyCalculateModule.Change) := moneyCalculateModule.Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
			}

		/*
		} else if(moneyCalculateModule.Coin_Ack = 0 & (buttonControlSWModule.Refund_Ack = 1 | buttonControlSWModule.Button_0_Ack = 1 | buttonControlSWModule.Button_1_Ack = 1 | buttonControlSWModule.Button_2_Ack = 1 | buttonControlSWModule.Button_3_Ack = 1)) { 
		*/
		} else if(NoInput_Ack = 0 & moneyCalculateModule.Coin_Ack = 0) { 
			next(state) := Init;
			next(IdleTimeCount) := 0;
		} else if(NoInput_Ack = 0 & moneyCalculateModule.Coin_Ack = 1) {
			next(state) := Turn_On_Ramp;
			next(IdleTimeCount) := 0;
			next(moneyCalculateModule.Sum) := moneyCalculateModule.Sum + moneyCalculateModule.Coin;
		}
/********************************************* Turn_On_Ramp state *********************************************/
	} else if(state = Turn_On_Ramp) {
		if(NoInput_Ack = 1) {
			
			if(IdleTimeCount = 2) {
				next(IdleTimeCount) := 0;
				next(state) := Init;
				next(moneyCalculateModule.Sum) := 0;
				next(moneyCalculateModule.Change) := moneyCalculateModule.Sum;
			} else {
				next(IdleTimeCount) := IdleTimeCount + 1;
				/*
				next(state) := Turn_On_Ramp;
				*/
				next(state) := state;
			}

		} else if(buttonControlSWModule.Refund_Ack = 1) {
			next(moneyCalculateModule.Sum) := 0;
			next(state) := Init;
			next(IdleTimeCount) := 0;

		} else if(buttonControlSWModule.Button_0_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(coffeeMakingModule.Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(coffeeMakingModule.Coffee_0_Remain > 0) {
					next(state) := Input_Button_0;
				} else {
					next(state) := No_Coffee_0;
				}
			}

		} else if(buttonControlSWModule.Button_1_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(coffeeMakingModule.Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(coffeeMakingModule.Coffee_1_Remain > 0) {
					next(state) := Input_Button_1;
				} else {
					next(state) := No_Coffee_1;
				}
			}

		} else if(buttonControlSWModule.Button_2_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(coffeeMakingModule.Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(coffeeMakingModule.Coffee_2_Remain > 0) {
					next(state) := Input_Button_2;
				} else {
					next(state) := No_Coffee_2;
				}
			}

		} else if(buttonControlSWModule.Button_3_Ack = 1) {
			next(IdleTimeCount) := 0;

			if(coffeeMakingModule.Cup_Remain = 0) {
				next(state) := No_Cup;
			} else {
				if(coffeeMakingModule.Coffee_3_Remain > 0) {
					next(state) := Input_Button_3;
				} else {
					next(state) := No_Coffee_3;
				}
			}

		} else if(moneyCalculateModule.Coin_Ack = 1) {

			next(IdleTimeCount) := 0;

			if(moneyCalculateModule.Sum + moneyCalculateModule.Coin >= 100) {
				next(state) := Sum_Max;
				next(moneyCalculateModule.Sum) := moneyCalculateModule.Sum;
				next(moneyCalculateModule.Change) := moneyCalculateModule.Coin;
				
			} else {
				next(moneyCalculateModule.Sum) := moneyCalculateModule.Sum + moneyCalculateModule.Coin;
				next(state) := Turn_On_Ramp;
				
			}
		}

/********************************************* Sum_Max state *********************************************/
	}



	/*******************************************************************/

	otherModuleTest_1 : SPEC AG (EF (buttonControlSWModule.Button_0_Ack = 1));
	/*
	counter_example
	otherModuleTest_2 : SPEC AG (AG ~(buttonControlSWModule.Button_0_Ack = 1));
	otherModuleTest_3 : SPEC AG (AG ~(buttonControlSWModule.Button_1_Ack = 1));

	Coin 입력과 ButtonControl을 서로 다른 모듈에서 받는걸로 나눠버리니까
	항상 Ack가 하나가 나가는게 아니게 돼버렸음.
	otherModuleTest_5 : SPEC AG ( AG ~((buttonControlSWModule.Button_0_Ack = 1 | buttonControlSWModule.Button_1_Ack = 1 | buttonControlSWModule.Button_2_Ack = 1 | buttonControlSWModule.Button_3_Ack = 1 | buttonControlSWModule.Refund_Ack = 1) & moneyCalculateModule.Coin_Ack = 1) );
	*/
	otherModuleTest_4 : SPEC AG ( EF ((buttonControlSWModule.Button_0_Ack = 1 | buttonControlSWModule.Button_1_Ack = 1 | buttonControlSWModule.Button_2_Ack = 1 | buttonControlSWModule.Button_3_Ack = 1 | buttonControlSWModule.Refund_Ack = 1) & moneyCalculateModule.Coin_Ack = 1) );

	noInput_1 : SPEC AG ( EF (NoInput_Ack = 1) );
	noInput_2 : SPEC AG ( EF (NoInput_Ack = 0) );
	/*
	counter_example
	noInput_3 : SPEC AG ( AG ~(NoInput_Ack = 1) );
	*/

	timeCheck_1 : SPEC AG ( EF (SYJ_TIME = 1000) );
	/*
	counter_example
	timeCheck_2 : SPEC AG ( AG ~(SYJ_TIME = 1000) );
	*/

	stateChange_1 : SPEC AG ( (state = Init & moneyCalculateModule.Coin_Ack = 1) -> AX (state = Turn_On_Ramp) );
	/*
	counter_example
	stateChange_1_1 : SPEC AG ( (state = Init & moneyCalculateModule.Coin_Ack = 1) -> AX (state = Init) );

	결국 Coin_Ack와 다른 Ack가 동시에 들어오면 Coin_Ack 우선으로 처리한다는 소리
	stateChange_2_1 : SPEC AG ( (state = Init & moneyCalculateModule.Coin_Ack = 1 & (buttonControlSWModule.Refund_Ack = 1 | buttonControlSWModule.Button_0_Ack = 1 | buttonControlSWModule.Button_1_Ack = 1 | buttonControlSWModule.Button_2_Ack = 1 | buttonControlSWModule.Button_3_Ack = 1)) -> AX (state = Init) );
	*/
	stateChange_2 : SPEC AG ( (state = Init & moneyCalculateModule.Coin_Ack = 1 & (buttonControlSWModule.Refund_Ack = 1 | buttonControlSWModule.Button_0_Ack = 1 | buttonControlSWModule.Button_1_Ack = 1 | buttonControlSWModule.Button_2_Ack = 1 | buttonControlSWModule.Button_3_Ack = 1)) -> AX (state = Turn_On_Ramp) );

	/*
	coffeeRemain_1 : SPEC AG ( coffeeMakingModule.Coffee_0_Remain = 5 );
	coffeeRemain_2 : SPEC AG ~( coffeeMakingModule.Coffee_0_Remain = 3 );
	*/

}

MODULE ButtonControlSWModule(SYJ_TIME, Button_0, Button_1, Button_2, Button_3, Refund, Button_0_Ack, Button_1_Ack, Button_2_Ack, Button_3_Ack, Refund_Ack) {

	input SYJ_TIME : 0..1000;
	input Button_0, Button_1, Button_2, Button_3, Refund : boolean;

	output Button_0_Ack, Button_1_Ack, Button_2_Ack, Button_3_Ack, Refund_Ack : boolean;

	if(Button_0 = 1) {
			Button_0_Ack := 1;
			Button_1_Ack := 0;
			Button_2_Ack := 0;
			Button_3_Ack := 0;
			Refund_Ack := 0;
	} else {
		if(Button_1 = 1) {
			Button_0_Ack := 0;
			Button_1_Ack := 1;
			Button_2_Ack := 0;
			Button_3_Ack := 0;
			Refund_Ack := 0;
		} else {
			if(Button_2 = 1) {
				Button_0_Ack := 0;
				Button_1_Ack := 0;
				Button_2_Ack := 1;
				Button_3_Ack := 0;
				Refund_Ack := 0;
			} else {
				if(Button_3 = 1) {
					
					Button_0_Ack := 0;
					Button_1_Ack := 0;
					Button_2_Ack := 0;
					Button_3_Ack := 1;
					Refund_Ack := 0;
				} else {
					if(Refund = 1) {
						Button_0_Ack := 0;
						Button_1_Ack := 0;
						Button_2_Ack := 0;
						Button_3_Ack := 0;
						Refund_Ack := 1;
					} else {
						Button_0_Ack := 0;
						Button_1_Ack := 0;
						Button_2_Ack := 0;
						Button_3_Ack := 0;
						Refund_Ack := 0;
					}
				}
			}
		}
	}


	mustAck_1 : SPEC AG ((Button_0 = 1 | Button_1 = 1 | Button_2 = 1 | Button_3 = 1 | Refund = 1) -> (Button_0_Ack | Button_1_Ack | Button_2_Ack | Button_3_Ack | Refund_Ack));

	/*
	counter example
	mustAck_2 : SPEC AG ((Button_0 = 1 | Button_1 = 1 | Button_2 = 1 | Button_3 = 1 | Refund = 1) -> EF ~(Button_0_Ack | Button_1_Ack | Button_2_Ack | Button_3_Ack | Refund_Ack));
	*/
}

MODULE DisplayModule(SYJ_TIME, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp,
 Display, Ramp, Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available, Led) {

	input SYJ_TIME : 0..1000;
	Sum : 0..100;


	output Display : 0..100;
	output Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available : boolean;
	output Led : 0..4;


	if(Sum >= Button_3_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 1;
		Button_3_Ramp := 1;
	} else if(Sum >= Button_2_Value & Sum < Button_3_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 1;
		Button_3_Ramp := 0;
	} else if(Sum >= Button_1_Value & Sum < Button_2_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 1;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	} else if(Sum >= Button_0_Value & Sum < Button_1_Value) {
		Button_0_Ramp := 1;
		Button_1_Ramp := 0;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	} else if(Sum < Button_0_Value) {
		Button_0_Ramp := 0;
		Button_1_Ramp := 0;
		Button_2_Ramp := 0;
		Button_3_Ramp := 0;
	}

}

MODULE MoneyCalculateModule(SYJ_TIME, Coin, Change, Coin_Ack, Coin_Remain, Sum) {

	input SYJ_TIME : 0..1000;
	input Coin : CoinValue;
	output Change : 0..100;
	output Coin_Remain : 0..100;
	output Coin_Ack : boolean;
	output Sum : 0..100;

	init(Coin_Remain) := 50;
	init(Change) := 0;
	init(Sum) := 0;


	if(Coin = 1 | Coin = 5 | Coin = 10) {
		Coin_Ack := 1;
	} else {
		Coin_Ack := 0;
	}





	/**************************************************************/

	coinAck_1 : SPEC AG ( (Coin > 0) -> (Coin_Ack = 1) );

}

/*
MODULE CoffeeMakingModule(SYJ_TIME, Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain, Cup) {
*/
MODULE CoffeeMakingModule(SYJ_TIME, Cup) {

	input SYJ_TIME : 0..1000;

/*
	input Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain : 0..5;
*/
	Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain : 0..5;

	output Cup : boolean;


	init(Cup_Remain) := 5;
	init(Coffee_0_Remain) := 5;
	init(Coffee_1_Remain) := 5;
	init(Coffee_2_Remain) := 5;
	init(Coffee_3_Remain) := 5;

	/*
	??
	next(Coffee_0_Remain) 에 대해서 써주지 않으면
	다음 상태에서는 이전 상태의 값이 이어지는게 아니라 아무 값이나 될 수 있는 듯.
	next(Coffee_0_Remain) := Coffee_0_Remain - 1;
	next(Coffee_0_Remain) := Coffee_0_Remain;
	*/

	/*
	init(IdleTimeCount) := 0;
	init(Ramp) := 0;
	init(Cup) := 0;
	*/

	/*
	coffeeRemain_1 : SPEC EX ~(Coffee_0_Remain = 4);
	coffeeRemain_2 : SPEC AX (Coffee_0_Remain = 0);
	*/


}


/* module main(Coin, Button_0, Button_1, Button_2, Button_3, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Refund, Display, Ramp, Cup, SYJ_TIME, Change, Coin_Remain, Cup_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain){ */
module main(Coin, Button_0, Button_1, Button_2, Button_3, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Refund,
			/* Display, Ramp, Cup, SYJ_TIME, Change, Coin_Remain, Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain, */
			Display, Ramp, Cup, SYJ_TIME, Change,
			Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available, Led){
	

	buttonControlSWModule : ButtonControlSWModule(SYJ_TIME, Button_0, Button_1, Button_2, Button_3, Refund, Button_0_Ack ,Button_1_Ack, Button_2_Ack, Button_3_Ack, Refund_Ack);
	displayModule : DisplayModule(SYJ_TIME, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Display, Ramp, Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available, Led);
	moneyCalculateModule : MoneyCalculateModule(SYJ_TIME, Coin, Coin_Ack, Change, Coin_Remain, Sum);
	/*
	coffeeMakingModule : CoffeeMakingModule(SYJ_TIME, Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain, Cup);
	*/
	coffeeMakingModule : CoffeeMakingModule(SYJ_TIME, Cup);

	mainControlSWModule : MainControlSWModule(SYJ_TIME, buttonControlSWModule, displayModule, moneyCalculateModule, coffeeMakingModule);

	init(SYJ_TIME) := 0;

	next(SYJ_TIME) := SYJ_TIME + 10;

	input Coin : CoinValue;
	input Button_0, Button_1, Button_2, Button_3, Refund : boolean;

	Coin_Ack, Button_0_Ack, Button_1_Ack, Button_2_Ack, Button_3_Ack, Refund_Ack, NoInput_Ack : boolean;

	output Ramp, Button_0_Ramp, Button_1_Ramp, Button_2_Ramp, Button_3_Ramp, Cup : boolean;

	output Display, Change: 0..100;
	output SYJ_TIME : 0..1000;
	/* output Coin_Remain : 0..100; */
	Coin_Remain : 0..100;
	Sum : 0..100;

	/* added */
	
	/*
	Cup_Remain, Coffee_0_Remain, Coffee_1_Remain, Coffee_2_Remain, Coffee_3_Remain : 0..5;
	init(Cup_Remain) := 5;
	init(Coffee_0_Remain) := 5;
	init(Coffee_1_Remain) := 5;
	init(Coffee_2_Remain) := 5;
	init(Coffee_3_Remain) := 5;
	*/
	IdleTimeCount : 0..2;

	output Cup_Available, Coffee_0_Available, Coffee_1_Available, Coffee_2_Available, Coffee_3_Available : boolean;

	/* v3 */
	output Led : 0..4;


	/*******************************************************************************************/

	noInputCheck_1 : SPEC AG ( EF (Coin = 0 & Button_0 = 0 & Button_1 = 0 & Button_2 = 0 & Button_3 = 0 & Refund = 0) );
	/*
	counter_example
	noInputCheck_2 : SPEC AG ( AG ~(Coin = 0 & Button_0 = 0 & Button_1 = 0 & Button_2 = 0 & Button_3 = 0 & Refund = 0) );
	*/

	

}